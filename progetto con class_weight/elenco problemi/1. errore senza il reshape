train_images_path = 'Immagini_satellitari/Train/images'
train_masks_path = 'Immagini_satellitari/Train/masks'
train_images_files = glob.glob(train_images_path + '/*.npy')
train_masks_files = glob.glob(train_masks_path + '/*.npy')
import numpy as np

model = create_unet(input_shape, num_classes, kernel,pool_size, encoder_filters, decoder_filters)
model.compile(optimizer='adam', loss="binary_crossentropy", metrics=['accuracy'])
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)


epoch = 300
batch_size = 20

early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor='val_loss',
    patience=50,
    restore_best_weights=True
)

train_images_batch = np.array([np.load(file) for file in train_images_files])
train_masks_batch = np.array([np.load(file) for file in train_masks_files])
train_images_batch = train_images_batch[:, :, :, canali_selezionati]
train_images, val_images, train_masks, val_masks = train_test_split(train_images_batch,
                                                                    train_masks_batch,
                                                                    test_size=0.2, random_state=42)
model.fit(train_images, train_masks, epochs=epoch, batch_size=batch_size,
          callbacks=[early_stopping],class_weight = weights,
          validation_data=(val_images, val_masks))


model.save(modello)



---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-4-0f000e0a116f> in <cell line: 32>()
     30                                                                     train_masks_batch,
     31                                                                     test_size=0.2, random_state=42)
---> 32 model.fit(train_images, train_masks, epochs=epoch, batch_size=batch_size,
     33           callbacks=[early_stopping],class_weight = weights,
     34           validation_data=(val_images, val_masks))

1 frames
/usr/local/lib/python3.10/dist-packages/keras/engine/data_adapter.py in _class_weights_map_fn(*data)
   1622 
   1623         if y.shape.rank > 2:
-> 1624             raise ValueError(
   1625                 "`class_weight` not supported for 3+ dimensional targets."
   1626             )

ValueError: `class_weight` not supported for 3+ dimensional targets.
